/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatRoomMembershipService } from "../chatRoomMembership.service";
import { ChatRoomMembershipCreateInput } from "./ChatRoomMembershipCreateInput";
import { ChatRoomMembership } from "./ChatRoomMembership";
import { ChatRoomMembershipFindManyArgs } from "./ChatRoomMembershipFindManyArgs";
import { ChatRoomMembershipWhereUniqueInput } from "./ChatRoomMembershipWhereUniqueInput";
import { ChatRoomMembershipUpdateInput } from "./ChatRoomMembershipUpdateInput";

export class ChatRoomMembershipControllerBase {
  constructor(protected readonly service: ChatRoomMembershipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatRoomMembership })
  async createChatRoomMembership(
    @common.Body() data: ChatRoomMembershipCreateInput
  ): Promise<ChatRoomMembership> {
    return await this.service.createChatRoomMembership({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatRoomMembership] })
  @ApiNestedQuery(ChatRoomMembershipFindManyArgs)
  async chatRoomMemberships(
    @common.Req() request: Request
  ): Promise<ChatRoomMembership[]> {
    const args = plainToClass(ChatRoomMembershipFindManyArgs, request.query);
    return this.service.chatRoomMemberships({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatRoomMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatRoomMembership(
    @common.Param() params: ChatRoomMembershipWhereUniqueInput
  ): Promise<ChatRoomMembership | null> {
    const result = await this.service.chatRoomMembership({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatRoomMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatRoomMembership(
    @common.Param() params: ChatRoomMembershipWhereUniqueInput,
    @common.Body() data: ChatRoomMembershipUpdateInput
  ): Promise<ChatRoomMembership | null> {
    try {
      return await this.service.updateChatRoomMembership({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatRoomMembership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatRoomMembership(
    @common.Param() params: ChatRoomMembershipWhereUniqueInput
  ): Promise<ChatRoomMembership | null> {
    try {
      return await this.service.deleteChatRoomMembership({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
